AI 리모델링 웹사이트 프로젝트 진행 상황

저번주

✅ [목표 수립] 사용자가 이미지를 올리면 AI를 활용해 리모델링 해주는 웹사이트 제작 완료
✅ [버전 관리] Git과 GitHub를 이용한 소스 코드 버전 관리 환경 구축 완료
✅ [개발 환경] Vite를 이용한 모던 React 개발 환경 구축 완료
✅ [UI 레이아웃] 사이드바와 메인 콘텐츠 영역으로 구성된 기본 UI 레이아웃 구현 완료
✅ [상태 관리] 'Interior'와 'Exterior' 모드 전환을 위한 상태 관리 기능 구현 완료
✅ [핵심 기능] 클릭 및 드래그앤드롭 방식의 이미지 업로더 컴포넌트 개발 완료
✅ [기능 구현] 스타일, 공간 유형, 추가 정보(프롬프트) 입력 기능 구현 완료
✅ [기능 구현] '생성하기' 버튼 클릭 시 백엔드 API 호출 기능 구현 완료
✅ [기능 구현] 원본-결과물 '비교하기' 기능 구현 완료
✅ [기능 구현] '새로 만들기' 기능 구현 완료
✅ [서버 구축] React와 AI 모델을 연결하는 FastAPI 기반 API 서버 아키텍처 설계 및 구현 완료
✅ [API 개발] 프론트엔드로부터 이미지와 데이터를 받는 '/api/generate' 엔드포인트 구현 완료
✅ [AI 연동] Stable Diffusion Web UI API (img2img)를 호출하는 핵심 로직 구현 완료
✅ [기능 구현] 생성된 이미지를 백엔드 폴더에 자동으로 저장하는 기능 구현 완료
✅ [기본 설정] Stable Diffusion Web UI 로컬 설치 및 API 모드 실행 완료
✅ [파라미터 연구] Denoising Strength, CFG Scale 등 주요 파라미터 역할 및 가설 수립 완료
✅ [테스트] Denoising Strength 값(0.5, 0.75, 0.9)에 따른 결과물 비교 테스트 완료
✅ [테스트] CFG Scale 값(5, 7, 11)에 따른 결과물 비교 테스트 완료
✅ [테스트] Denoising Strength와 ControlNet Weight 상호작용 테스트 (시나리오 A, B) 완료
✅ [최적화] 일반적인 사용에 가장 적합한 기본값(Denoising: 0.8, CFG: 7) 확정 완료


이번주
✅ 리치 텍스트 에디터(Tiptap) 도입
✅ 코드 구조 개선 (컴포넌트화)
✅ UI 레이아웃 및 스타일 수정
🎯 클라우드 저장소 연동 (Firebase)


요약 
React와 FastAPI를 기반으로 한 AI 리모델링 웹사이트의 핵심 기능 개발을 성공적으로 완료했습니다.
프론트엔드에서는 사용자가 이미지를 올리고 결과물을 비교하는 모든 인터페이스를 구현했으며, 백엔드에서는 Stable Diffusion 모델 연동 및 API 최적화까지 마쳤습니다.
이번 주에는 사용자 경험을 한 단계 높이기 위해, 단순 입력창을 Tiptap 기반의 리치 텍스트 에디터로 교체하고 관련 UI를 모두 개선했습니다.
현재 최우선 과제는 사용자가 에디터로 작성한 서식 있는 문서가 클라우드 환경에서 손실 없이 완벽하게 처리되는지 검증하는 것입니다.
이를 위해 Firebase 연동을 진행하며, 데이터가 안정적으로 저장되고 복원되는지 테스트하는 단계에 있습니다.
궁극적으로는 생성된 이미지 파일까지 클라우드에 저장하여 프로젝트의 확장성을 확보할 계획입니다.